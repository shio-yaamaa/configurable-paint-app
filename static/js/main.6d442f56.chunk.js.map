{"version":3,"sources":["components/Canvas.tsx","components/PenPreview.tsx","components/ColorPicker.tsx","components/ColorPalette.tsx","components/SizePicker.tsx","components/Toolbar.tsx","HistoryStack.ts","components/App.tsx","hooks/usePaintApp.ts","color.ts","config.ts","index.tsx"],"names":["Canvas","props","useEffect","initCanvas","className","width","height","ref","canvasRef","PenPreview","style","penSize","backgroundColor","color","ColorPicker","type","value","onChange","e","handleColorChange","currentTarget","ColorPalette","colors","map","i","onClick","SizePicker","size","min","max","handleSizeChange","parseInt","Toolbar","paletteColors","length","minPenSize","maxPenSize","handlePenSizeChange","fillCanvas","canUndo","undo","canRedo","redo","clearCanvas","download","handleDownload","href","dataUrl","target","rel","HistoryStack","maxLength","snapshots","position","this","Math","item","slice","push","shift","undefined","snapshot","App","config","canvas","useRef","ctx","current","getContext","useState","initialPenColor","setColor","initialPenSize","setPenSize","hasCanvasInitialized","isDrawing","lastX","lastY","historyStack","setCanUndo","setCanRedo","useCallback","imageData","putImageData","fillStyle","fillRect","getImageData","startDrawing","event","beginPath","moveTo","offsetX","offsetY","lineTo","stroke","draw","stopDrawing","addEventListener","strokeStyle","lineJoin","lineCap","lineWidth","usePaintApp","setDataUrl","toDataURL","colorQueryParamRegex","defaultConfig","getQueryParamAsPositiveInt","queryParams","paramName","get","int","getQueryParamAsColor","match","getQueryParamAsColorList","values","getAll","filter","getConfigFromQueryParams","URLSearchParams","window","location","search","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d442f56.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport './Canvas.css';\n\ninterface Props {\n  width: number;\n  height: number;\n  canvasRef?: React.MutableRefObject<HTMLCanvasElement | undefined>;\n  initCanvas: () => void;\n}\n\nexport const Canvas: React.VFC<Props> = (props) => {\n  useEffect(() => {\n    props.initCanvas();\n  })\n\n  return (\n    <div className='Canvas'>\n      <canvas\n        className='Canvas-canvas'\n        width={props.width}\n        height={props.height}\n        ref={props.canvasRef as any}>\n      </canvas>\n    </div>\n  );\n}\n","import React from 'react';\nimport './PenPreview.css';\nimport { Color } from '../types';\n\ninterface Props {\n  color: Color;\n  penSize: number;\n}\n\nexport const PenPreview: React.VFC<Props> = (props) => {\n  return (\n    <div className='PenPreview'>\n      <div\n        className='PenPreview-content'\n        style={{\n          width: props.penSize,\n          height: props.penSize,\n          backgroundColor: props.color,\n        }}>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport './ColorPicker.css';\nimport { Color } from '../types';\n\ninterface Props {\n  color: Color;\n  handleColorChange: (color: Color) => void;\n}\n\nexport const ColorPicker: React.VFC<Props> = (props) => {\n  return (\n    <div className='ColorPicker'>\n      <input\n        className='ColorPicker-input'\n        type='color'\n        value={props.color}\n        onChange={(e) => props.handleColorChange(e.currentTarget.value)}\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport './ColorPalette.css';\nimport { Color } from '../types';\n\ninterface Props {\n  colors: Color[];\n  handleColorChange: (color: Color) => void;\n}\n\nexport const ColorPalette: React.VFC<Props> = (props) => {\n  return (\n    <div className='ColorPalette'>\n      {\n        props.colors.map((color, i) => (\n          <div\n            className='ColorPalette-option'\n            key={i}\n            style={{ backgroundColor: color }}\n            onClick={() => props.handleColorChange(color)}>\n          </div>\n        ))\n      }\n    </div>\n  );\n}\n","import React from 'react';\nimport './SizePicker.css';\n\ninterface Props {\n  size: number;\n  min: number;\n  max: number;\n  handleSizeChange: (size: number) => void;\n}\n\nexport const SizePicker: React.VFC<Props> = (props) => {\n  return (\n    <div className='SizePicker'>\n      <input\n        className='SizePicker-range-input'\n        type='range'\n        value={props.size}\n        min={props.min}\n        max={props.max}\n        onChange={(e) => props.handleSizeChange(parseInt(e.currentTarget.value))}\n      />\n      <input\n        className='SizePicker-number-input'\n        type='number'\n        value={props.size}\n        min={props.min}\n        max={props.max}\n        onChange={(e) => props.handleSizeChange(parseInt(e.currentTarget.value))}\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport './Toolbar.css';\nimport { Color } from '../types';\nimport { PenPreview } from './PenPreview';\nimport { ColorPicker } from './ColorPicker';\nimport { ColorPalette } from './ColorPalette';\nimport { SizePicker } from './SizePicker';\n\ninterface Props {\n  color: Color;\n  paletteColors: Color[];\n\n  penSize: number;\n  minPenSize: number;\n  maxPenSize: number;\n\n  canUndo: boolean;\n  canRedo: boolean;\n\n  dataUrl: string;\n\n  clearCanvas: () => void;\n  fillCanvas: (color: Color) => void;\n\n  handleColorChange: (color: Color) => void;\n  handlePenSizeChange: (size: number) => void;\n\n  undo: () => void;\n  redo: () => void;\n\n  handleDownload: () => void;\n}\n\nexport const Toolbar: React.VFC<Props> = (props) => {\n  return (\n    <aside className='Toolbar'>\n      <div className='Toolbar-top'>\n        <div className='Toolbar-section'>\n          <h1 className='Toolbar-title'>Pen Preview</h1>\n          <PenPreview\n            color={props.color}\n            penSize={props.penSize} />\n        </div>\n        <div className='Toolbar-section'>\n          <h1 className='Toolbar-title'>Color</h1>\n          <ColorPicker\n            color={props.color}\n            handleColorChange={props.handleColorChange} />\n          {\n            props.paletteColors.length > 0 && (\n              <ColorPalette\n                colors={props.paletteColors}\n                handleColorChange={props.handleColorChange} />\n            )\n          }\n        </div>\n        <div className='Toolbar-section'>\n          <h1 className='Toolbar-title'>Pen Size</h1>\n          <SizePicker\n            min={props.minPenSize}\n            max={props.maxPenSize}\n            size={props.penSize}\n            handleSizeChange={props.handlePenSizeChange} />\n        </div>\n        <div className='Toolbar-section'>\n          <button className='Toolbar-button' onClick={() => props.fillCanvas(props.color)}>Fill</button>\n        </div>\n      </div>\n      <div className='Toolbar-bottom'>\n        <button\n          className={`Toolbar-button ${props.canUndo ? '' : 'disabled'}`}\n          onClick={props.undo}>\n          Undo\n        </button>\n        <button\n          className={`Toolbar-button ${props.canRedo ? '' : 'disabled'}`}\n          onClick={props.redo}>\n          Redo\n        </button>\n        <button className='Toolbar-button' onClick={props.clearCanvas}>Clear</button>\n        <a\n          className='Toolbar-button'\n          download='image.png'\n          onClick={props.handleDownload}\n          href={props.dataUrl}\n        >\n          Save\n        </a>\n        <a\n          className='Toolbar-link'\n          href='https://github.com/shio-yaamaa/configurable-paint-app'\n          target='_blank'\n          rel='noreferrer'\n        >\n          About this page\n        </a>\n      </div>\n    </aside>\n  );\n}\n","export class HistoryStack<T> {\n  private readonly maxLength: number;\n  private snapshots: T[] = [];\n  private position = -1;\n\n  constructor(maxLength: number) {\n    this.maxLength = Math.max(maxLength, 1);\n  }\n\n  push(item: T): void {\n    // Discard snapshots that have been preserved for redo\n    this.snapshots = this.snapshots.slice(0, this.position + 1);\n    this.snapshots.push(item);\n\n    if (this.position < this.maxLength) {\n      this.position++;\n    } else {\n      // No more snapshots can be saved; Discard the oldest one\n      this.snapshots.shift();\n    }\n  }\n\n  canUndo(): boolean {\n    return this.snapshots[this.position - 1] !== undefined;\n  }\n\n  canRedo(): boolean {\n    return this.snapshots[this.position + 1] !== undefined;\n  }\n\n  undo(): T | null {\n    if (!this.canUndo()) return null;\n    const snapshot = this.snapshots[this.position - 1];\n    this.position--;\n    return snapshot;\n  }\n\n  redo(): T | null {\n    if (!this.canRedo()) return null;\n    const snapshot = this.snapshots[this.position + 1];\n    this.position++;\n    return snapshot;\n  }\n}\n","import React, { useState, useCallback } from 'react';\nimport './App.css';\nimport { Config } from '../types';\nimport { Canvas } from './Canvas';\nimport { Toolbar } from './Toolbar';\nimport { usePaintApp } from '../hooks/usePaintApp'\n\ninterface Props {\n  config: Config;\n}\n\nexport const App: React.VFC<Props> = (props) => {\n  const [\n    {\n      canvas, color, penSize,\n      canUndo, canRedo,\n    },\n    {\n      initCanvas, clearCanvas, fillCanvas,\n      handleColorChange, handlePenSizeChange,\n      undo, redo,\n    },\n  ] = usePaintApp(props.config);\n\n  const [dataUrl, setDataUrl] = useState('#');\n  const handleDownload = useCallback(() => {\n    if (!canvas || !canvas.current) return;\n    setDataUrl(canvas.current.toDataURL('image/png'));\n  }, [canvas]);\n\n  return (\n    <div className='App'>\n      <Toolbar\n        color={color}\n        paletteColors={props.config.paletteColors}\n        penSize={penSize}\n        minPenSize={1}\n        maxPenSize={100}\n        canUndo={canUndo}\n        canRedo={canRedo}\n        dataUrl={dataUrl}\n        clearCanvas={clearCanvas}\n        fillCanvas={fillCanvas}\n        handleColorChange={handleColorChange}\n        handlePenSizeChange={handlePenSizeChange}\n        undo={undo}\n        redo={redo}\n        handleDownload={handleDownload} />\n      <Canvas\n        width={props.config.width}\n        height={props.config.height}\n        canvasRef={canvas}\n        initCanvas={initCanvas} />\n    </div>\n  );\n}\n","import { useCallback, useRef, useState } from 'react';\nimport { HistoryStack } from '../HistoryStack';\nimport { Color, Config } from '../types';\n\ntype PaintAppReturnType = [\n  {\n    canvas: React.MutableRefObject<HTMLCanvasElement | undefined>,\n    color: Color,\n    penSize: number,\n\n    canUndo: boolean,\n    canRedo: boolean,\n  },\n  {\n    initCanvas: () => void,\n    clearCanvas: () => void,\n    fillCanvas: (color: Color) => void,\n    handleColorChange: (color: Color) => void,\n    handlePenSizeChange: (size: number) => void,\n\n    undo: () => void,\n    redo: () => void,\n  },\n];\n\nexport const usePaintApp = (config: Config): PaintAppReturnType => {\n  const canvas = useRef<HTMLCanvasElement>();\n  const ctx = useRef(canvas?.current?.getContext('2d'));\n\n  const [color, setColor] = useState(config.initialPenColor);\n  const [penSize, setPenSize] = useState(config.initialPenSize);\n\n  const hasCanvasInitialized = useRef(false);\n  const isDrawing = useRef(false);\n  const lastX = useRef(0);\n  const lastY = useRef(0);\n\n  const historyStack = useRef(new HistoryStack<ImageData>(30));\n\n  const [canUndo, setCanUndo] = useState(historyStack.current.canUndo());\n  const [canRedo, setCanRedo] = useState(historyStack.current.canRedo());\n\n  const undo = useCallback(() => {\n    if (!ctx.current) return;\n    const imageData = historyStack.current.undo();\n    if (imageData === null) return;\n    ctx.current.putImageData(imageData, 0, 0);\n    setCanUndo(historyStack.current.canUndo());\n    setCanRedo(historyStack.current.canRedo());\n  }, []);\n\nconst redo = useCallback(() => {\n    if (!ctx.current) return;\n    const imageData = historyStack.current.redo();\n    if (imageData === null) return;\n    ctx.current.putImageData(imageData, 0, 0);\n    setCanUndo(historyStack.current.canUndo());\n    setCanRedo(historyStack.current.canRedo());\n  }, []);\n\n  const fillCanvas = useCallback((color: Color) => {\n    if (!canvas || !canvas.current || !ctx || !ctx.current) return;\n    ctx.current.fillStyle = color;\n    ctx.current.fillRect(0, 0, canvas.current.width, canvas.current.height);\n\n    historyStack.current.push(ctx.current.getImageData(0, 0, canvas.current.width, canvas.current.height));\n    setCanUndo(historyStack.current.canUndo());\n    setCanRedo(historyStack.current.canRedo());\n  }, []);\n\n  const clearCanvas = useCallback(() => {\n    fillCanvas(config.backgroundColor);\n  }, [config.backgroundColor, fillCanvas]);\n\n  const startDrawing = useCallback((event: MouseEvent) => {\n    if (!ctx || !ctx.current) return;\n    isDrawing.current = true;\n\n    ctx.current.beginPath();\n    ctx.current.moveTo(event.offsetX, event.offsetY);\n    ctx.current.lineTo(event.offsetX, event.offsetY);\n    ctx.current.stroke();\n\n    [lastX.current, lastY.current] = [event.offsetX, event.offsetY];\n  }, []);\n\n  const draw = useCallback((event: MouseEvent) => {\n    if (!ctx || !ctx.current || !isDrawing.current) return;\n\n    ctx.current.beginPath();\n    ctx.current.moveTo(lastX.current, lastY.current);\n    ctx.current.lineTo(event.offsetX, event.offsetY);\n    ctx.current.stroke();\n\n    [lastX.current, lastY.current] = [event.offsetX, event.offsetY];\n  }, []);\n\n  const stopDrawing = useCallback(() => {\n    if (!isDrawing.current) return;\n    isDrawing.current = false;\n\n    if (ctx.current && canvas.current) {\n      historyStack.current.push(ctx.current.getImageData(0, 0, canvas.current.width, canvas.current.height));\n      setCanUndo(historyStack.current.canUndo());\n      setCanRedo(historyStack.current.canRedo());\n    }\n  }, []);\n\n  const initCanvas = useCallback(() => {\n    ctx.current = canvas?.current?.getContext('2d');\n    if (!hasCanvasInitialized.current && canvas && canvas.current && ctx && ctx.current) {\n      canvas.current.addEventListener('mousedown', startDrawing);\n      canvas.current.addEventListener('mousemove', draw);\n      canvas.current.addEventListener('mouseup', stopDrawing);\n      canvas.current.addEventListener('mouseout', stopDrawing);\n\n      ctx.current.strokeStyle = color;\n      ctx.current.lineJoin = 'round';\n      ctx.current.lineCap = 'round';\n      ctx.current.lineWidth = penSize;\n\n      clearCanvas();\n\n      hasCanvasInitialized.current = true;\n    }\n  }, [color, penSize, startDrawing, draw, stopDrawing, clearCanvas]);\n\n  const handleColorChange = useCallback((color: Color) => {\n    setColor(color);\n    if (ctx.current) {\n      ctx.current.strokeStyle = color;\n    }\n  }, []);\n\n  const handlePenSizeChange = useCallback((size: number) => {\n    if (size < 0) return;\n    setPenSize(size);\n    if (ctx.current) {\n      ctx.current.lineWidth = size;\n    }\n  }, []);\n\n  return [\n    {\n      canvas,\n      color,\n      penSize,\n      canUndo,\n      canRedo,\n    },\n    {\n      initCanvas,\n      clearCanvas,\n      fillCanvas,\n      handleColorChange,\n      handlePenSizeChange,\n      undo,\n      redo,\n    }\n  ];\n};\n","import { Color } from './types';\n\nexport const white: Color = '#ffffff';\nexport const black: Color = '#000000';\n\n// Does not include a '#' since it has a special meaning in URLs.\nexport const colorQueryParamRegex = /^[0-9a-f]{6}$/;\n","import { Config, Color } from './types';\nimport { black, colorQueryParamRegex, white } from './color';\n\nconst defaultConfig: Config = {\n  width: 800,\n  height: 600,\n\n  initialPenColor: black,\n  initialPenSize: 10,\n\n  backgroundColor: white,\n\n  paletteColors: [],\n};\n\nexport const getConfigFromQueryParams = (queryParams: URLSearchParams): Config => {\n  return {\n    width: getQueryParamAsPositiveInt(queryParams, 'width') ?? defaultConfig.width,\n    height: getQueryParamAsPositiveInt(queryParams, 'height') ?? defaultConfig.height,\n\n    initialPenColor: getQueryParamAsColor(queryParams, 'initial_pen_color') ?? defaultConfig.initialPenColor,\n    initialPenSize: getQueryParamAsPositiveInt(queryParams, 'initial_pen_size') ?? defaultConfig.initialPenSize,\n\n    backgroundColor: getQueryParamAsColor(queryParams, 'background_color') ?? defaultConfig.backgroundColor,\n\n    paletteColors: getQueryParamAsColorList(queryParams, 'palette_color') ?? defaultConfig.paletteColors,\n  };\n};\n\nconst getQueryParamAsPositiveInt = (queryParams: URLSearchParams, paramName: string): number | null => {\n  const value = queryParams.get(paramName);\n  if (value === null) return null;\n  const int = parseInt(value);\n  return int > 0 ? int : null;\n};\n\nconst getQueryParamAsColor = (queryParams: URLSearchParams, paramName: string): Color | null => {\n  const value = queryParams.get(paramName);\n  if (value === null) return null;\n  return value.match(colorQueryParamRegex) ? `#${value}` : null;\n};\n\nconst getQueryParamAsColorList = (queryParams: URLSearchParams, paramName: string): Color[] | null => {\n  const values = queryParams.getAll(paramName);\n  if (values.length === 0) return null;\n  return values.filter(value => value.match(colorQueryParamRegex)).map(value => `#${value}`);\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './variables.css';\nimport './index.css';\nimport { App } from './components/App';\nimport { getConfigFromQueryParams } from './config';\n\nconst config = getConfigFromQueryParams(new URLSearchParams(window.location.search));\n\nReactDOM.render(\n  <React.StrictMode>\n    <App config={config} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}